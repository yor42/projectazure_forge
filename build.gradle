buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//we mix some ins
apply plugin: 'org.spongepowered.mixin'


version = '0.9.14-IDP'
group = 'com.yor42.projectrazure' // http://maven.apache.org/guides/mini/guide-naming-conventions.html

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                projectazure {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                projectazure {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'projectazure', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/' ), '--existing-mod', 'tconstruct'

            mods {
                projectazure {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenCentral()
    mavenLocal()
    repositories {
        maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    }

    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url "https://maven.firstdarkdev.xyz/snapshots"
    }

    maven { url 'https://modmaven.dev/' }

    //Mekanism
    maven {
        url "https://cursemaven.com"
    }

    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }

    //Tinkers
    maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }

    //REI
    repositories {
        maven { url "https://maven.shedaniel.me" }
    }

    //Curios
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven { url 'https://maven.blamejared.com' }

    flatDir {
        dirs 'compilelib', 'implementlib'
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'

    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.1'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    testAnnotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //compileOnly fg.deobf(fileTree(dir: 'compilelib', include: '*.jar'))

    //implementation fg.deobf(fileTree(dir: 'implementlib', include: '*.jar'))


    //Geckoilib
    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-1.18:${geckolib_version}")
    implementation fg.deobf('curse.maven:theoneprobe-245211:3965688')
    //TaC
    implementation fg.deobf('curse.maven:framework-549225:3723144')

    compileOnly fg.deobf('curse.maven:realistic-torches-235729:4101941')


    //Multiblocked
    implementation fg.deobf("com.lowdragmc.ldlib:LowDragLib:${minecraft_version}-${ldlib_version}")
    implementation fg.deobf("com.lowdragmc.multiblocked:Multiblocked:${minecraft_version}-${mbd_version}")

    //Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${minecraft_version}-${curios_version}:api")

    implementation fg.deobf('com.tac.guns:TaC:0.3.6')
    compileOnly fg.deobf('com.yor.solarapocalypse:solarapocalypse:1.18.2-1.11')

    // JEI
    implementation fg.deobf('curse.maven:architectury-419699:4384391')
    implementation fg.deobf('curse.maven:clothconfig-348521:3972426')

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
    //tinkers
    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinkers_version}")

    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${Patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${Patchouli_version}")


}

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'projectazure.refmap.json'
    config 'mixin.projectazure.json'

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "projectazure",
            "Specification-Vendor": "yor42",
            "MixinConfigs": "mixin.projectazure.json",
            "Specification-Version": "0.00.1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"yor42",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}